[build-system]
build-backend = "poetry.core.masonry.api"
requires = ["poetry-core"]

[tool.poetry]
name = "biogather"
version = "0.1.0"
description = "Library to facilitate extraction of information from text and other modalities. Part of the BioCypher ecosystem."
authors = ["Sebastian Lobentanzer <sebastian.lobentanzer@gmail.com>"]
license = "MIT"
readme = "README.md"
packages = [{include = "biogather", from = "src"}]
classifiers = [
    "Development Status :: 2 - Pre-Alpha",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3 :: Only",
]

[tool.poetry.dependencies]
python = "^3.10"
numpy = "1.24.3"
spacy = "^3.7.2"
scikit-learn = "^1.4.0"
nltk = "^3.8.1"
transformers = "^4.37.2"
torch = "^2.2.0"
gensim = "^4.3.2"

[tool.poetry.extras]
scispacy = [
    "scispacy",
    "nmslib",
    "numpy",
    "scipy",
]

[tool.poetry.group.dev.dependencies]
pre-commit = "*"

[tool.pytest.ini_options]
testpaths = ["tests"]
markers = ["raises"]

[tool.coverage.paths]
source = [
    "src/biogather",
    "*/site-packages/biogather",
]

[tool.coverage.run]
branch = true
parallel = true

[tool.coverage.report]
exclude_lines = ["pragma: no cover"]
precision = 2
[tool.ruff]
line-length = 120

[tool.ruff.lint]
select = ["ALL"]
ignore = [
    "D107",  # 'Missing docstring in __init__' ignored because pydoclint wants us to document the class instead.
    "D203",  # '1 blank line required before class docstring' ignored because we want no blank line.
    "D212",  # 'Multi-line docstring summary should start at the first line' ignored because we want the summary to start on the second line.
    "D407",  # 'Missing dashed underline after section' ignored because Google style docstrings don't underline.
    "ANN002",  # 'Missing type annotation for {*args} in method'.
    "ANN003",  # 'Missing type annotation for {*kwargs} in method'.
    "ANN101",  # 'Missing type annotation for {self} in method'.
    "ANN102",  # 'Missing type annotation for {cls} in classmethod'.
]
exclude = [
]

[tool.ruff.lint.extend-per-file-ignores]
"__init__.py" = [
    "E401",  # 'Multiple imports on one line'
    "E402",  # 'Module level import not at top of file'
    "F401",  # 'Imported but unused'
    "I001",  # 'Import block is un-sorted or un-formatted' ignored because we may have to import in a particular, not-alphabetical order.
]
"tests/**/*.py" = [
    "S101",  # 'Use of assert detected' ignored because we are using pytest.
    "INP001",  # 'Insecure input' ignored because we are testing.
    "ANN201",  # 'Missing type annotation for {return}' ignored because all tests return `None`.
]

[tool.ruff.lint.isort]
case-sensitive = true
known-first-party = ["src", "biogather"]
lines-after-imports = 1

[tool.pydoclint]
style = "google"  # TODO: Other styles are possible here, like 'numpy'
arg-type-hints-in-docstring = false
check-return-types = false
check-yield-types = false

[tool.poetry.urls]
Homepage = "https://github.com/biocypher/biogather"
"Source Code" = "https://github.com/biocypher/biogather"
"Bug Tracker" = "https://github.com/biocypher/biogather/issues"
Documentation = "https://biogather.readthedocs.io"
Download = "https://pypi.org/project/biogather/#files"
